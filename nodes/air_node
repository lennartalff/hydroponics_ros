#!/usr/bin/env python
# -*- coding: utf-8 -*-
#required: https://pypi.org/project/RPi.bme280/
import rospy

import smbus2
import bme280

from hydroponics.msg import Float64Stamped
from hydroponics.node import Node

ADDRESS = 0x76


class AirNode(Node):
    def __init__(self, name):
        super(AirNode, self).__init__(name=name)
        self.bus = smbus2.SMBus(1)
        self.configs = self.get_param("~air_sensors")
        self.sensors = self.init_sensors()
        self.temp_pub = rospy.Publisher("air_temperature",
                                        Float64Stamped,
                                        queue_size=1)
        self.pressure_pub = rospy.Publisher("air_pressure",
                                            Float64Stamped,
                                            queue_size=1)
        self.humidity_pub = rospy.Publisher("air_humidity",
                                            Float64Stamped,
                                            queue_size=1)

    def run(self):
        rate = rospy.Rate(1)
        while not rospy.is_shutdown():
            for sensor in self.sensors:
                data = bme280.sample(self.bus, sensor["address"],
                                     sensor["calibration"])
                self.publish_all_measurements(data, sensor["index"])
            rate.sleep()

    def publish_all_measurements(self, data, index):
        stamp = rospy.Time.now()

        msg = Float64Stamped()
        msg.header.stamp = stamp
        msg.index = index
        msg.data = data.humidity
        self.humidity_pub.publish(msg)

        msg = Float64Stamped()
        msg.header.stamp = stamp
        msg.index = index
        msg.data = data.pressure
        self.pressure_pub.publish(msg)

        msg = Float64Stamped()
        msg.header.stamp = stamp
        msg.index = index
        msg.data = data.temperature
        self.temp_pub.publish(msg)

    def init_sensors(self):
        sensors = []
        for config in self.configs:
            sensor = dict()
            sensor["calibration"] = bme280.load_calibration_params(
                self.bus, config["address"])
            sensor["address"] = config["address"]
            sensor["index"] = config["index"]
            sensors.append(sensor)
        return sensors


def main():
    node = AirNode("air_node")
    node.run()


if __name__ == "__main__":
    main()
